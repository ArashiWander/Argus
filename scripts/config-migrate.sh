#!/bin/bash

# Configuration Migration Script for Argus
# Handles migration of environment variables and configuration files between versions

set -e

# Configuration
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_ROOT="$(cd "$SCRIPT_DIR/.." && pwd)"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

log() {
    echo -e "${BLUE}[$(date '+%Y-%m-%d %H:%M:%S')]${NC} $1"
}

error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

# Backup current configuration
backup_config() {
    local backup_dir="$PROJECT_ROOT/config_backups"
    local timestamp=$(date +%Y%m%d_%H%M%S)
    
    mkdir -p "$backup_dir"
    
    log "Creating configuration backup..."
    
    # Backup environment files
    if [ -f "$PROJECT_ROOT/backend/.env" ]; then
        cp "$PROJECT_ROOT/backend/.env" "$backup_dir/.env_backend_$timestamp"
        success "Backed up backend .env file"
    fi
    
    if [ -f "$PROJECT_ROOT/frontend/.env" ]; then
        cp "$PROJECT_ROOT/frontend/.env" "$backup_dir/.env_frontend_$timestamp"
        success "Backed up frontend .env file"
    fi
    
    # Backup docker-compose files
    for compose_file in docker-compose.yml docker-compose.dev.yml docker-compose.full.yml; do
        if [ -f "$PROJECT_ROOT/$compose_file" ]; then
            cp "$PROJECT_ROOT/$compose_file" "$backup_dir/${compose_file}_$timestamp"
            success "Backed up $compose_file"
        fi
    done
    
    success "Configuration backup completed in: $backup_dir"
}

# Migrate environment variables from v1.x to v2.x format
migrate_env_v1_to_v2() {
    local env_file="${1:-$PROJECT_ROOT/backend/.env}"
    local new_env_file="${env_file}.new"
    
    if [ ! -f "$env_file" ]; then
        warning "Environment file not found: $env_file"
        return 1
    fi
    
    log "Migrating environment variables from v1.x to v2.x format..."
    
    # Read current environment file
    source "$env_file"
    
    # Create new environment file with updated format
    cat > "$new_env_file" << EOF
# Argus Backend Configuration (v2.x)
# Generated by migration script on $(date)

# Application Settings
NODE_ENV=${NODE_ENV:-development}
PORT=${PORT:-3001}
LOG_LEVEL=${LOG_LEVEL:-info}
FRONTEND_URL=${FRONTEND_URL:-http://localhost:3000}

# JWT Configuration
JWT_SECRET=${JWT_SECRET:-argus-dev-secret-key}
JWT_EXPIRES_IN=${JWT_EXPIRES_IN:-24h}

# Database Connections
DATABASE_URL=${DATABASE_URL:-postgresql://postgres:password@localhost:5432/argus}
REDIS_URL=${REDIS_URL:-redis://localhost:6379}

# InfluxDB Configuration (v2.x format)
EOF

    # Convert old InfluxDB configuration
    if [ -n "${INFLUX_HOST:-}" ]; then
        local influx_url="http://${INFLUX_HOST}:${INFLUX_PORT:-8086}"
        echo "INFLUXDB_URL=$influx_url" >> "$new_env_file"
        success "Converted INFLUX_HOST to INFLUXDB_URL: $influx_url"
    else
        echo "INFLUXDB_URL=${INFLUXDB_URL:-http://localhost:8086}" >> "$new_env_file"
    fi
    
    cat >> "$new_env_file" << EOF
INFLUXDB_TOKEN=${INFLUXDB_TOKEN:-}
INFLUXDB_ORG=${INFLUXDB_ORG:-argus}
INFLUXDB_BUCKET=${INFLUXDB_BUCKET:-metrics}

# Elasticsearch Configuration
EOF

    # Convert old Elasticsearch configuration
    if [ -n "${ELASTIC_HOST:-}" ]; then
        local elastic_url="http://${ELASTIC_HOST}:${ELASTIC_PORT:-9200}"
        echo "ELASTICSEARCH_URL=$elastic_url" >> "$new_env_file"
        success "Converted ELASTIC_HOST to ELASTICSEARCH_URL: $elastic_url"
    else
        echo "ELASTICSEARCH_URL=${ELASTICSEARCH_URL:-http://localhost:9200}" >> "$new_env_file"
    fi
    
    cat >> "$new_env_file" << EOF
ELASTICSEARCH_USERNAME=${ELASTICSEARCH_USERNAME:-}
ELASTICSEARCH_PASSWORD=${ELASTICSEARCH_PASSWORD:-}

# Protocol Configuration
GRPC_ENABLED=${GRPC_ENABLED:-false}
GRPC_PORT=${GRPC_PORT:-50051}

MQTT_ENABLED=${MQTT_ENABLED:-false}
MQTT_BROKER_URL=${MQTT_BROKER_URL:-mqtt://localhost:1883}

KAFKA_ENABLED=${KAFKA_ENABLED:-false}
KAFKA_BROKERS=${KAFKA_BROKERS:-localhost:9092}

# Rate Limiting
RATE_LIMIT_WINDOW_MS=${RATE_LIMIT_WINDOW_MS:-900000}
RATE_LIMIT_MAX_REQUESTS=${RATE_LIMIT_MAX_REQUESTS:-100}

# Security
CORS_ORIGIN=${CORS_ORIGIN:-http://localhost:3000}
EOF

    success "Created new environment file: $new_env_file"
    
    # Prompt user to review and replace
    echo
    echo "Migration complete! Please review the new configuration:"
    echo "  Current: $env_file"
    echo "  New:     $new_env_file"
    echo
    echo "To apply the migration:"
    echo "  mv $new_env_file $env_file"
}

# Create default configuration for new installations
create_default_config() {
    local backend_env="$PROJECT_ROOT/backend/.env"
    
    if [ -f "$backend_env" ]; then
        warning "Backend .env file already exists. Use backup-config first if you want to replace it."
        return 1
    fi
    
    log "Creating default configuration files..."
    
    # Create backend .env
    cat > "$backend_env" << EOF
# Argus Backend Configuration
NODE_ENV=development
PORT=3001
LOG_LEVEL=info
FRONTEND_URL=http://localhost:3000

# JWT Configuration
JWT_SECRET=argus-dev-secret-key-change-in-production
JWT_EXPIRES_IN=24h

# Database Connections
DATABASE_URL=postgresql://postgres:password@localhost:5432/argus
REDIS_URL=redis://localhost:6379

# InfluxDB Configuration
INFLUXDB_URL=http://localhost:8086
INFLUXDB_TOKEN=
INFLUXDB_ORG=argus
INFLUXDB_BUCKET=metrics

# Elasticsearch Configuration
ELASTICSEARCH_URL=http://localhost:9200
ELASTICSEARCH_USERNAME=
ELASTICSEARCH_PASSWORD=

# Protocol Configuration
GRPC_ENABLED=false
GRPC_PORT=50051

MQTT_ENABLED=false
MQTT_BROKER_URL=mqtt://localhost:1883

KAFKA_ENABLED=false
KAFKA_BROKERS=localhost:9092

# Rate Limiting
RATE_LIMIT_WINDOW_MS=900000
RATE_LIMIT_MAX_REQUESTS=100

# Security
CORS_ORIGIN=http://localhost:3000
EOF

    success "Created backend .env file: $backend_env"
    
    # Create frontend .env if it doesn't exist
    local frontend_env="$PROJECT_ROOT/frontend/.env"
    if [ ! -f "$frontend_env" ]; then
        cat > "$frontend_env" << EOF
# Argus Frontend Configuration
REACT_APP_API_URL=http://localhost:3001
REACT_APP_WS_URL=ws://localhost:3001
REACT_APP_VERSION=2.0.0
EOF
        success "Created frontend .env file: $frontend_env"
    fi
}

# Validate configuration
validate_config() {
    local env_file="${1:-$PROJECT_ROOT/backend/.env}"
    
    if [ ! -f "$env_file" ]; then
        error "Environment file not found: $env_file"
        return 1
    fi
    
    log "Validating configuration..."
    
    # Source the environment file
    set -a
    source "$env_file"
    set +a
    
    local errors=0
    
    # Check required variables
    local required_vars=(
        "NODE_ENV"
        "PORT"
        "DATABASE_URL"
        "INFLUXDB_URL"
        "ELASTICSEARCH_URL"
    )
    
    for var in "${required_vars[@]}"; do
        if [ -z "${!var:-}" ]; then
            error "Required variable $var is not set"
            ((errors++))
        else
            success "âœ“ $var is set"
        fi
    done
    
    # Validate URL formats
    if [[ ! "$DATABASE_URL" =~ ^postgresql:// ]]; then
        error "DATABASE_URL must start with postgresql://"
        ((errors++))
    fi
    
    if [[ ! "$INFLUXDB_URL" =~ ^https?:// ]]; then
        error "INFLUXDB_URL must be a valid HTTP/HTTPS URL"
        ((errors++))
    fi
    
    if [[ ! "$ELASTICSEARCH_URL" =~ ^https?:// ]]; then
        error "ELASTICSEARCH_URL must be a valid HTTP/HTTPS URL"
        ((errors++))
    fi
    
    if [[ ! "$REDIS_URL" =~ ^redis:// ]]; then
        error "REDIS_URL must start with redis://"
        ((errors++))
    fi
    
    # Check port numbers
    if ! [[ "$PORT" =~ ^[0-9]+$ ]] || [ "$PORT" -lt 1 ] || [ "$PORT" -gt 65535 ]; then
        error "PORT must be a valid port number (1-65535)"
        ((errors++))
    fi
    
    if [ "$errors" -eq 0 ]; then
        success "Configuration validation passed!"
        return 0
    else
        error "Configuration validation failed with $errors errors"
        return 1
    fi
}

# Generate configuration from template
generate_from_template() {
    local template_file="$PROJECT_ROOT/backend/.env.example"
    local output_file="$PROJECT_ROOT/backend/.env"
    
    if [ ! -f "$template_file" ]; then
        error "Template file not found: $template_file"
        return 1
    fi
    
    if [ -f "$output_file" ]; then
        warning "Output file already exists: $output_file"
        echo "Use backup-config first or specify a different output file"
        return 1
    fi
    
    log "Generating configuration from template..."
    
    # Copy template and prompt for customization
    cp "$template_file" "$output_file"
    
    echo
    echo "Configuration file created from template: $output_file"
    echo "Please edit the file to customize your settings, especially:"
    echo "  - JWT_SECRET (use a secure random string in production)"
    echo "  - Database connection strings"
    echo "  - InfluxDB token and organization"
    echo "  - Any protocol-specific settings"
    echo
    
    success "Configuration generated successfully"
}

# Show usage
usage() {
    echo "Argus Configuration Migration Utility"
    echo
    echo "Usage: $0 [COMMAND] [OPTIONS]"
    echo
    echo "Commands:"
    echo "  backup-config              Create backup of current configuration"
    echo "  migrate-v1-to-v2 [FILE]    Migrate environment variables from v1.x to v2.x"
    echo "  create-default             Create default configuration files"
    echo "  validate [FILE]            Validate configuration file"
    echo "  from-template              Generate configuration from template"
    echo
    echo "Examples:"
    echo "  $0 backup-config"
    echo "  $0 migrate-v1-to-v2"
    echo "  $0 validate backend/.env"
    echo
}

# Main script logic
case "${1:-}" in
    "backup-config")
        backup_config
        ;;
    "migrate-v1-to-v2")
        migrate_env_v1_to_v2 "${2:-}"
        ;;
    "create-default")
        create_default_config
        ;;
    "validate")
        validate_config "${2:-}"
        ;;
    "from-template")
        generate_from_template
        ;;
    *)
        usage
        ;;
esac