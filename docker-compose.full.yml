version: '3.8'

services:
  # Argus Application with Multi-Protocol Support
  argus-app:
    build: .
    ports:
      - "3001:3001"    # HTTP REST API
      - "50051:50051"  # gRPC
    environment:
      NODE_ENV: production
      LOG_LEVEL: info
      
      # Protocol Configuration
      HTTP_ENABLED: "true"
      HTTP_PORT: 3001
      GRPC_ENABLED: "true"
      GRPC_PORT: 50051
      GRPC_TLS_ENABLED: "false"
      MQTT_ENABLED: "true"
      MQTT_BROKER_URL: "mqtt://mosquitto:1883"
      KAFKA_ENABLED: "true"
      KAFKA_BROKERS: "kafka:9092"
      KAFKA_CLIENT_ID: "argus-server"
      
      # Database Configuration
      INFLUXDB_URL: "http://influxdb:8086"
      INFLUXDB_TOKEN: "${INFLUXDB_TOKEN}"
      INFLUXDB_ORG: "argus"
      INFLUXDB_BUCKET: "metrics"
      ELASTICSEARCH_URL: "http://elasticsearch:9200"
      DATABASE_URL: "postgresql://postgres:${POSTGRES_PASSWORD}@postgres:5432/argus"
      REDIS_URL: "redis://redis:6379"
      
      # JWT Configuration
      JWT_SECRET: "${JWT_SECRET}"
      JWT_EXPIRES_IN: "24h"
    depends_on:
      - postgres
      - redis
      - influxdb
      - elasticsearch
      - mosquitto
      - kafka
    networks:
      - argus-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: argus
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: "${POSTGRES_PASSWORD}"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - argus-network
    restart: unless-stopped

  # Redis Cache
  redis:
    image: redis:7-alpine
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    networks:
      - argus-network
    restart: unless-stopped

  # InfluxDB for Time-Series Data
  influxdb:
    image: influxdb:2.7-alpine
    environment:
      DOCKER_INFLUXDB_INIT_MODE: setup
      DOCKER_INFLUXDB_INIT_USERNAME: admin
      DOCKER_INFLUXDB_INIT_PASSWORD: "${INFLUXDB_PASSWORD}"
      DOCKER_INFLUXDB_INIT_ORG: argus
      DOCKER_INFLUXDB_INIT_BUCKET: metrics
      DOCKER_INFLUXDB_INIT_ADMIN_TOKEN: "${INFLUXDB_TOKEN}"
    volumes:
      - influxdb_data:/var/lib/influxdb2
    ports:
      - "8086:8086"
    networks:
      - argus-network
    restart: unless-stopped

  # Elasticsearch for Log Storage
  elasticsearch:
    image: elasticsearch:8.11.0
    environment:
      - discovery.type=single-node
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - xpack.security.enabled=false
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
    networks:
      - argus-network
    restart: unless-stopped

  # Mosquitto MQTT Broker
  mosquitto:
    image: eclipse-mosquitto:2.0
    ports:
      - "1883:1883"    # MQTT
      - "8883:8883"    # MQTT over TLS
      - "9001:9001"    # WebSocket
    volumes:
      - ./mosquitto.conf:/mosquitto/config/mosquitto.conf
      - mosquitto_data:/mosquitto/data
      - mosquitto_logs:/mosquitto/log
    networks:
      - argus-network
    restart: unless-stopped

  # Apache Kafka
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    volumes:
      - zookeeper_data:/var/lib/zookeeper/data
    networks:
      - argus-network
    restart: unless-stopped

  kafka:
    image: confluentinc/cp-kafka:7.4.0
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_LOG_RETENTION_HOURS: 168
      KAFKA_LOG_RETENTION_BYTES: 1073741824
    volumes:
      - kafka_data:/var/lib/kafka/data
    networks:
      - argus-network
    restart: unless-stopped

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
      - ./ssl:/etc/nginx/ssl
    depends_on:
      - argus-app
    networks:
      - argus-network
    restart: unless-stopped

  # Grafana for Visualization (Optional)
  grafana:
    image: grafana/grafana:10.2.0
    ports:
      - "3000:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: "${GRAFANA_PASSWORD}"
      GF_INSTALL_PLUGINS: "grafana-influxdb-datasource"
    volumes:
      - grafana_data:/var/lib/grafana
    networks:
      - argus-network
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:
  influxdb_data:
  elasticsearch_data:
  mosquitto_data:
  mosquitto_logs:
  zookeeper_data:
  kafka_data:
  grafana_data:

networks:
  argus-network:
    driver: bridge

# Health check for the entire stack
x-healthcheck-common: &healthcheck-common
  interval: 30s
  timeout: 10s
  retries: 3
  start_period: 40s